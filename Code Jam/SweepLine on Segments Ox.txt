#include <bits/stdc++.h>
using namespace std;

#define ll long long //data types used often, but you don't want to type them time by time
#define ull unsigned long long
#define ui unsigned int
#define ld long double
#define mod 998244353
//#define inf 100000000000010
#define us unsigned short
#define IOS ios_base::sync_with_stdio(0); //to synchronize the input of cin and scanf
//#define INF LONG_MAX
#define PI 3.1415926535897932384626
#define mpp make_pair
#define fi first
#define se second
#define pb push_back
#define rep(x,j,n)for(int x=j;x<n;x++)
#define repr(x,n,j)for(ll x=n;x>j;x--)
#define all(x) (x).begin(), (x).end()

typedef vector<pair<ll,ll>> vpi;
typedef vector<ll> vi;
typedef vector<vi> vvi;
typedef pair<ll,ll> pi;
//typedef long double ld;
bool isprime(ll n)
{
    if(n<=1)return false;
    if(n<=3)return true;
    if(n%2==0||n%3==0)return false;
    for(ll i=5;i*i<=n;i+=6)
    {
        if(n%i==0||n%(i+2)==0)return false;
    }
    return true;
}

ll modexp(ll a,ll b,ll m)
{
    ll r=1;
    a=a%m;
    while(b>0)
    {
        if(b&1)r=(r*a)%m;
        b = b>>1;
        a=(a*a)%m;
    }
    return r%m;
}




ll builtin_popcount(ll x)
{
    ll cnt = 0;
    for(ll i=60;i>=0;i--)
    {
        if((1LL<<i)&x)cnt++;
    }
    return cnt;
}

ll addmod(ll a,ll b)
{
    a%=mod;
    b%=mod;
    return (a+b)%mod;
}
ll mulmod(ll a,ll b)
{
    a%=mod;
    b%=mod;
    return (a*b)%mod;
}
ll submod(ll a,ll b)
{
    a%=mod;
    b%=mod;
    a-=b;
    if(a<0)a+=mod;
    return a%mod;
}
struct CustomCompare
{
    bool operator()(ll a,ll b)
    {
        return a>b;
    }
};
/*
const int mxn = 5*(1e6) +10;
vi spf(mxn);
void sieve()
{
    for(ll i =0;i<mxn;i++)spf[i]  = i;
    for(ll i=2;i<mxn;i+=2)spf[i] = 2;
    for(ll i = 3;i*i<mxn;i++)
    {
        if(spf[i]==i)
        {
            for(ll j = i*i;j<mxn;j+=i)
            {
                if(spf[j]==j)spf[j] = i;
            }
        }
    }
}
*/

const int mxn = 2e9 ;
map<ll,ll>mp;

ll get_val(vpi arr)
{
    ll ans = 0;
    ll l = -mxn , r = -mxn;
    sort(all(arr));
    rep(i,0,arr.size())
    {
        if(arr[i].fi>r)
        {
            if(l!=-mxn)mp[l] = 0;

            l = arr[i].fi ,r = arr[i].se;
            ans++;
        }
        else r = max(r,arr[i].se);
    }
    mp[l] = 0;
    return ans;
}

void solve(vector<pair<ll,pi> >query,vi &ans)
{

    set<ll>open;

    rep(i,0,query.size())
    {
        ll j = i-1;
        vi op,cl;
        while(j+1<query.size()&&query[i].fi==query[j+1].fi)
        {
            j++;
            if(query[j].se.fi==1)op.pb(query[j].se.se);
            else cl.pb(query[j].se.se);
        }
        if(open.size()==1&&!op.empty())
        {
            ans[*open.begin()]++;
        }
        for(auto x:op)open.insert(x);
        for(auto x:cl)open.erase(x);
        i=j;
    }

}


int main(){
ios_base::sync_with_stdio(false);
cin.tie(0);cout.tie(0);

ll t; cin>>t;
while(t--)
{
    mp.clear();
    ll n; cin>>n;
    vpi arr(n);
    rep(i,0,n)cin>>arr[i].fi>>arr[i].se;

    vector<pair<ll,pi> >query;

    rep(i,0,n)
    {
        query.pb({ arr[i].fi,{1,i} });
        query.pb({ arr[i].se,{-1,i} });
    }
    sort(all(query));
    vi ans(n);

    ll curr = get_val(arr);

    solve(query,ans);

    rep(i,0,n)if(mp.count(arr[i].fi))mp[arr[i].fi]++;

    rep(i,0,n)if(mp[arr[i].fi]==1)ans[i]--;

    ll res = -mxn;
    for(auto x:ans)res = max(x,res);
    cout<<curr+res<<"\n";
}
return 0;

}
/*
1
11 3
0 1 2 2 3 3 3 4 4 4 4

*/
