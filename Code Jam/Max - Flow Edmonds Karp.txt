#include <bits/stdc++.h>
using namespace std;

#define ll long long //data types used often, but you don't want to type them time by time
#define ull unsigned long long
#define ui unsigned int
//#define ld long double
#define mod 998244353
#define inf 100000000000010
#define us unsigned short
#define IOS ios_base::sync_with_stdio(0); //to synchronize the input of cin and scanf
#define INF LONG_MAX
#define PI 3.1415926535897932384626
#define mpp make_pair
#define fi first
#define se second
#define pb push_back
#define rep(x,j,n)for(int x=j;x<n;x++)
#define all(x) (x).begin(), (x).end()

typedef vector<pair<ll,ll>> vpi;
typedef vector<ll> vi;
typedef vector<vi> vvi;
typedef pair<ll,ll> pi;
typedef long double ld;
bool isprime(ll n)
{
    if(n<=1)return false;
    if(n<=3)return true;
    if(n%2==0||n%3==0)return false;
    for(ll i=5;i*i<=n;i+=6)
    {
        if(n%i==0||n%(i+2)==0)return false;
    }
    return true;
}

ll modexp(ll a,ll b,ll m)
{
    ll r=1;
    a=a%m;
    while(b>0)
    {
        if(b&1)r=(r*a)%m;
        b = b>>1;
        a=(a*a)%m;
    }
    return r%m;
}




ll builtin_popcount(ll x)
{
    ll cnt = 0;
    for(ll i=60;i>=0;i--)
    {
        if((1LL<<i)&x)cnt++;
    }
    return cnt;
}

ll addmod(ll a,ll b)
{
    a%=mod;
    b%=mod;
    return (a+b)%mod;
}
ll mulmod(ll a,ll b)
{
    a%=mod;
    b%=mod;
    return (a*b)%mod;
}
ll submod(ll a,ll b)
{
    a%=mod;
    b%=mod;
    a-=b;
    if(a<0)a+=mod;
    return a%mod;
}
struct CustomCompare
{
    bool operator()(ll a,ll b)
    {
        return a>b;
    }
};
/*
const int mxn = 5*(1e6) +10;
vi spf(mxn);
void sieve()
{
    for(ll i =0;i<mxn;i++)spf[i]  = i;
    for(ll i=2;i<mxn;i+=2)spf[i] = 2;
    for(ll i = 3;i*i<mxn;i++)
    {
        if(spf[i]==i)
        {
            for(ll j = i*i;j<mxn;j+=i)
            {
                if(spf[j]==j)spf[j] = i;
            }
        }
    }
}
*/

const int mxn = 500;
ll res[mxn][mxn] , cap[mxn][mxn];
vi g[mxn];
bool vis[mxn];
vi table[mxn];
ll par[mxn];

ll can(ll u,ll v)
{
    return (cap[u][v]>res[u][v])>0;
}
bool bfs(ll source,ll sink)
{
    memset(vis,0,sizeof(vis));

    queue<ll>q;
    q.push(source);
    vis[source] = 1;
    while(!q.empty())
    {
        ll tp = q.front();q.pop();
        for(auto x:g[tp])
        {
            if(!vis[x]&&can(tp,x))
            {
                vis[x] = 1;
                q.push(x);
                par[x] = tp;
            }
        }
    }
    return (vis[sink]==1);
}

ll augmented_path(ll source,ll sink)
{
    //cout<<"check\n";
    ll curr = sink,flow = LLONG_MAX;
    while(curr!=source)
    {
        ll p = par[curr];
        flow  = min(flow,cap[p][curr]-res[p][curr]);
        curr = p;
    }
    curr = sink;
    while(curr!=source)
    {
        ll p = par[curr];
        res[p][curr]+=flow;
        res[curr][p]-=flow;
        curr = p;
    }
    return flow;
}

ll max_flow(ll source,ll sink)
{
    ll ans = 0;
    while(bfs(source,sink))
    {
        ll k =augmented_path(source,sink);
        ans+=k;
    }
    return ans;
}
void dfs(ll src,ll cnt)
{
    table[cnt].pb(src);
    vis[src] = 1;
    for(auto x:g[src])
    {
        if(!vis[x]&&llabs(res[src][x])==1)
        {
            dfs(x,cnt);
            break;
        }
    }
}
int main(){
ios_base::sync_with_stdio(false);
cin.tie(0);cout.tie(0);
ll n; cin>>n;
vi arr(n);
ll odd = 0,even = 0;
rep(i,0,n)
{
    cin>>arr[i];
    if(arr[i]%2)odd++;
    else even++;
}
ll source = n+1,sink = n+2;

if(odd!=even)
{
    cout<<"Impossible\n";
    return 0;
}

rep(i,0,n)
{
    rep(j,0,n)
    {
        if(arr[i]%2==1&&arr[j]%2==0&&isprime(arr[i]+arr[j]))
        {
            g[i].pb(j),g[j].pb(i);
            cap[i][j] = 1;
        }
    }
    if(arr[i]%2)
    {
        g[source].pb(i);
        g[i].pb(source);
        cap[source][i] = 2;
    }
    else
    {
        g[sink].pb(i);
        g[i].pb(sink);
        cap[i][sink] = 2;
    }
}

ll ans = max_flow(source,sink);

//cout<<ans<<"\n";
if(ans==n)
{
    fill(vis,vis+n+3,false);
    ll cnt = 0;
    vis[source] = vis[sink] = 1;
    rep(i,0,n)
    {
        if(!vis[i])dfs(i,cnt),cnt++;
    }
    cout<<cnt<<"\n";
    rep(i,0,cnt)
    {
        cout<<table[i].size()<<" ";
        for(auto x:table[i])cout<<x+1<<" ";
        cout<<"\n";
    }
}
else cout<<"Impossible\n";
return 0;
}
/*
4
1
1 2 1

*/
