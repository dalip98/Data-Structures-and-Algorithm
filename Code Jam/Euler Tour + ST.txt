#include <bits/stdc++.h>
using namespace std;

#define ll long long //data types used often, but you don't want to type them time by time
#define ull unsigned long long
#define ui unsigned int
//#define ld long double
#define mod 1000000007
//define inf 100000000000010
#define us unsigned short
#define IOS ios_base::sync_with_stdio(0); //to synchronize the input of cin and scanf
#define INF LONG_MAX
#define PI 3.1415926535897932384626
#define mpp make_pair
#define fi first
#define se second
#define pb push_back
#define rep(x,j,n)for(int x=j;x<n;x++)
#define repr(x,n,j)for(ll x=n;x>j;x--)
#define all(x) (x).begin(), (x).end()

typedef vector<pair<ll,ll>> vpi;
typedef vector<ll> vi;
typedef vector<vi> vvi;
typedef pair<ll,ll> pi;
typedef long double ld;

mt19937 myrand(time(0));

bool isprime(ll n)
{
    if(n<=1)return false;
    if(n<=3)return true;
    if(n%2==0||n%3==0)return false;
    for(ll i=5;i*i<=n;i+=6)
    {
        if(n%i==0||n%(i+2)==0)return false;
    }
    return true;
}

ll modexp(ll a,ll b,ll m)
{
    ll r=1;
    a=a%m;
    while(b>0)
    {
        if(b&1)r=(r*a)%m;
        b = b>>1;
        a=(a*a)%m;
    }
    return r%m;
}




ll builtin_popcount(ll x)
{
    ll cnt = 0;
    for(ll i=60;i>=0;i--)
    {
        if((1LL<<i)&x)cnt++;
    }
    return cnt;
}

ll addmod(ll a,ll b)
{
    a%=mod;
    b%=mod;
    return (a+b)%mod;
}
ll mulmod(ll a,ll b)
{
    a%=mod;
    b%=mod;
    return (a*b)%mod;
}
ll submod(ll a,ll b)
{
    a%=mod;
    b%=mod;
    a-=b;
    if(a<0)a+=mod;
    return a%mod;
}
struct CustomCompare
{
    bool operator()(ll a,ll b)
    {
        return a>b;
    }
};
/*
const int mxn = 5*(1e6) +10;
vi spf(mxn);
void sieve()
{
    for(ll i =0;i<mxn;i++)spf[i]  = i;
    for(ll i=2;i<mxn;i+=2)spf[i] = 2;
    for(ll i = 3;i*i<mxn;i++)
    {
        if(spf[i]==i)
        {
            for(ll j = i*i;j<mxn;j+=i)
            {
                if(spf[j]==j)spf[j] = i;
            }
        }
    }
}
*/

const int mxn = 5e5 + 10;
ll inf = 1e18;

ll n,q;
ll tree[4*mxn] , lazy[4*mxn] ,l[mxn],r[mxn],ans[mxn],dp[mxn],id[mxn];
ll e_start[mxn],e_end[mxn];
vpi g[mxn];
vi query[mxn];

ll nxt = 1;

void propagate(ll v,ll tl,ll tr,ll val)
{
    tree[v]+=val;
    if(tl!=tr)
    {
        lazy[2*v]+=val;
        lazy[2*v+1]+=val;
    }
    lazy[v] = 0;
}

void update(ll v,ll tl,ll tr,ll l,ll r,ll val)
{
    propagate(v,tl,tr,lazy[v]);
    if(tl>r||l>tr)return;
    if(l<=tl&&tr<=r)
    {
        propagate(v,tl,tr,val);
        return;
    }
    ll mid = tl + (tr-tl)/2;
    update(2*v,tl,mid,l,r,val);
    update(2*v+1,mid+1,tr,l,r,val);

    tree[v] = min(tree[2*v],tree[2*v+1]);
}

ll query_lr(ll v,ll tl,ll tr,ll l,ll r)
{
    propagate(v,tl,tr,lazy[v]);
    if(tl>r||l>tr)return inf;

    if(l<=tl&&tr<=r)return tree[v];
    ll mid = tl + (tr-tl)/2;
    return min(query_lr(2*v,tl,mid,l,r),query_lr(2*v+1,mid+1,tr,l,r));
}

void dfs(ll src)
{
    id[src] = e_start[src] = nxt;
    nxt++;

    if(src!=1&&g[src].size()==0)update(1,1,n,id[src],id[src],dp[src]);
    else update(1,1,n,id[src],id[src],inf);

    for(auto x:g[src])
    {
        ll to = x.fi ,w = x.se;
        dp[to] = dp[src] + x.se;
        dfs(to);
    }
    e_end[src] = nxt - 1;
}

void dfs2(ll src)
{
    for(auto x:query[src])
    {
        ans[x] = query_lr(1,1,n,l[x],r[x]);
    }

    for(auto x:g[src])
    {
        ll to = x.fi,w = x.se;

        update(1,1,n,e_start[to],e_end[to],-w);

        if(e_start[to]>=2)update(1,1,n,1,e_start[to]-1,w);
        if(e_end[to]+1<=n)update(1,1,n,e_end[to]+1,n,w);

        dfs2(to);

        update(1,1,n,e_start[to],e_end[to],w);

        if(e_start[to]>=2)update(1,1,n,1,e_start[to]-1,-w);
        if(e_end[to]+1<=n)update(1,1,n,e_end[to]+1,n,-w);
    }
}

int main(){
ios_base::sync_with_stdio(false);
cin.tie(0);cout.tie(0);

cin>>n>>q;

rep(i,2,n+1)
{
    ll par,weight; cin>>par>>weight;
    g[par].pb({i,weight});
}

dfs(1);
rep(i,1,q+1)
{
    ll v; cin>>v>>l[i]>>r[i];
    query[v].pb(i);
}

dfs2(1);
rep(i,1,q+1)cout<<ans[i]<<"\n";
return 0;
}
/*
2
4
2 16 4 18
2
4 1 2
2 3 3
5
11 19 1 1 3
4
1 2 4
2 4 5
2 3 3
4 5 1
*/
